name: Build and Deploy to Linode

on:
  push:
    branches:
      - main  # Se ejecuta cuando hay un push en la rama "main" del repositorio deploy-remaq

jobs:
  build:  # Primer trabajo: Construcción del backend y frontend
    runs-on: ubuntu-latest  # Utiliza un entorno Ubuntu en GitHub Actions

    steps:
    - name: Checkout Deploy Repository
      uses: actions/checkout@v3  # Clona el repositorio "deploy-remaq"

    # ✅ Clonar el backend usando el Personal Access Token (PAT)
    - name: Clone Backend Repository
      run: |
        git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/GIED/remaqApi.git backend

    # ✅ Clonar el frontend usando el PAT
    - name: Clone Frontend Repository
      run: |
        git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/GIED/remaqUi.git frontend

    # ✅ Crear carpeta de artefactos antes de copiar los archivos compilados
    - name: Crear carpeta de artefactos
      run: mkdir -p artifact/backend artifact/frontend

    # ✅ Configurar Java y compilar el backend con Maven
    - name: Setup Java & Build Backend
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - run: |
        cd backend
        mvn clean package -DskipTests  # Compila el backend sin ejecutar pruebas
        ls -lh target/  # ✅ Verificar que se generó el .jar
        cp target/api-0.0.1-SNAPSHOT.jar ../artifact/backend/

    # ✅ Configurar Node.js y compilar el frontend con Angular
    - name: Setup Node.js & Build Frontend
      uses: actions/setup-node@v3
      with:
        node-version: 20.9.0
    - run: |
        cd frontend
        npm install
        npm run build --prod
        ls -lh dist/diamond-ng/  # ✅ Verificar que se generó el frontend
        cp -r dist/diamond-ng/* ../artifact/frontend/

    # ✅ Verificar contenido antes de subir los artefactos
    - name: Verificar contenido de artifact/
      run: ls -lh artifact/backend/ artifact/frontend/

    # ✅ Guardar los artefactos construidos por separado
    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifact
        path: artifact/backend/

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifact
        path: artifact/frontend/

  deploy:  # Segundo trabajo: Desplegar los artefactos en Linode
    needs: build  # Este job solo se ejecuta si el job "build" fue exitoso
    runs-on: ubuntu-latest  # Usa un entorno Ubuntu

    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Guarda la clave privada SSH para conectarse a Linode
        chmod 600 ~/.ssh/id_rsa  # Ajusta los permisos de la clave
        ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts  # Agrega Linode a los hosts conocidos

    # ✅ Descargar los artefactos compilados del backend y frontend
    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-artifact
        path: artifact/backend/

    - name: Download Frontend Artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifact
        path: artifact/frontend/

    # ✅ Conectarse a Linode y eliminar versiones anteriores antes de copiar nuevos archivos
    - name: Deploy to Linode
      run: |
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "🗑 Eliminando versiones anteriores..."

          # ✅ Eliminar el backend antiguo antes de copiar el nuevo
          rm -f /opt/webServer/backend/ferreteria/ferreteria.jar

          # ✅ Eliminar archivos del frontend antiguo excepto .htaccess
          find /var/www/html/ferreteria/ -mindepth 1 ! -name '.htaccess' -delete

          echo "📥 Copiando archivos nuevos..."
        EOF

        # ✅ Subir el nuevo backend compilado al servidor Linode
        scp -P ${{ secrets.SSH_PORT }} artifact/backend/api-0.0.1-SNAPSHOT.jar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/webServer/backend/ferreteria/ferreteria.jar

        # ✅ Subir el nuevo frontend compilado al servidor Linode
        scp -P ${{ secrets.SSH_PORT }} -r artifact/frontend/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/html/ferreteria/

        # ✅ Conectarse a Linode para reiniciar los servicios
        ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "🔄 Reiniciando Backend..."
          chmod +x /opt/webServer/backend/ferreteria/mi-backend.sh  # Asegurar permisos de ejecución
          /opt/webServer/backend/ferreteria/mi-backend.sh restart   # Reiniciar el backend

          echo "🌐 Reiniciando NGINX..."
          sudo systemctl restart nginx  # Reiniciar NGINX para reflejar los cambios
          # despliegue 240325
          # despliegue 010425
          # despliegue 130525
          # despliegue 130525v2
          # despliegue 130525v3
          # despliegue 130525v4

          echo "✅ Despliegue completado"
        EOF
